#include <stdio.h>
#include <stdlib.h>


typedef struct Node {
    int data;
    struct Node* next;
} Node;


Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}


void insertMiddle(Node** head, int data, int position) {
    Node* newNode = createNode(data);
    Node* temp = *head;
    
   
    if (position == 0) {
        newNode->next = *head;
        *head = newNode;
        return;
    }

    for (int i = 0; temp != NULL && i < position - 1; i++) {
        temp = temp->next;
    }

   
    if (temp == NULL) {
        printf("Position out of range.\n");
        free(newNode);
        return;
    }

   
    newNode->next = temp->next;
    temp->next = newNode;
}


void deleteMiddle(Node** head, int position) {
    Node* temp = *head;
    Node* prev = NULL;

 
    if (position == 0 && temp != NULL) {
        *head = temp->next;
        free(temp);
        return;
    }

    for (int i = 0; temp != NULL && i < position; i++) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Position out of range.\n");
        return;
    }


    prev->next = temp->next;
    free(temp);
}

void printList(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    Node* head = NULL;
    int choice, data, position;

    while (1) {
        // Display menu
        printf("\nMenu:\n");
        printf("1. Insert Element\n");
        printf("2. Delete Element\n");
        printf("3. Print List\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: // Insert Element
                printf("Enter the data to insert: ");
                scanf("%d", &data);
                printf("Enter the position to insert the element (0 to %d): ", (head == NULL ? 0 : 1)); // Adjust range based on current size
                scanf("%d", &position);
                insertMiddle(&head, data, position);
                break;
                
            case 2: // Delete Element
                printf("Enter the position of the element to delete (0 to %d): ", (head == NULL ? -1 : 0)); // Adjust range based on current size
                scanf("%d", &position);
                deleteMiddle(&head, position);
                break;
                
            case 3: // Print List
                printList(head);
                break;
                
          case 4: // Exit
                printf("Exiting the program.\n");
                // Free memory before exiting
                while (head != NULL) {
                    Node* temp = head;
                    head = head->next;
                    free(temp);
                }
                return 0;
                
            default:
                printf("Invalid choice. Please enter a number between 1 and 4.\n");
        }
    }

    return 0;
}
